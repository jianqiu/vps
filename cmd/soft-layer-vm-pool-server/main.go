package main

import (
	"log"
	"os"
	"io/ioutil"
	"database/sql"
	"crypto/tls"
	"crypto/x509"
	"errors"
	"fmt"

	loads "github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/jianqiu/vps/db"
	"github.com/jianqiu/vps/db/sqldb"
	"github.com/jianqiu/vps/migration"
	"github.com/jianqiu/vps/restapi/operations"
	"github.com/jianqiu/vps/vpslager"
	"github.com/go-sql-driver/mysql"
	"github.com/tedsuo/ifrit"
	"github.com/tedsuo/ifrit/grouper"
	"github.com/tedsuo/ifrit/sigmon"

	"code.cloudfoundry.org/lager"
	"code.cloudfoundry.org/clock"

	"github.com/jianqiu/vps/restapi"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, "")
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewSoftLayerVMPoolAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = `SoftLayer VM Pool`
	parser.LongDescription = `This is a SoftLayer VM Pool Server.
`
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	logger, _ := vpslager.New("vps", server.LogLevel)
	logger.Info("starting-migration")

	clock := clock.NewClock()

	var activeDB db.DB
	var sqlDB *sqldb.SQLDB
	var sqlConn *sql.DB

	if server.DBDriver != "" && server.DBConn != "" {
		var err error
		connectionString := appendSSLConnectionStringParam(logger, server.DBDriver, server.DBConn, server.SqlCACertFile)

		sqlConn, err = sql.Open(server.DBDriver, connectionString)
		if err != nil {
			logger.Fatal("failed-to-open-sql", err)
		}
		defer sqlConn.Close()
		sqlConn.SetMaxOpenConns(0)
		sqlConn.SetMaxIdleConns(0)

		err = sqlConn.Ping()
		if err != nil {
			logger.Fatal("sql-failed-to-connect", err)
		}

		sqlDB = sqldb.NewSQLDB(sqlConn, clock, server.DBDriver)
		err = sqlDB.CreateConfigurationsTable(logger)
		if err != nil {
			logger.Fatal("sql-failed-create-configurations-table", err)
		}
		activeDB = sqlDB
	}

	if activeDB == nil {
		logger.Fatal("no-database-configured", errors.New("no database configured"))
	}

	migrationsDone := make(chan struct{})

	migrationManager := migration.NewManager(
		logger,
		sqlDB,
		sqlConn,
		migrationsDone,
		clock,
		server.DBDriver,
	)

	members := grouper.Members{
		{"migration-manager", migrationManager},
	}

	group := grouper.NewOrdered(os.Interrupt, members)

	monitor := ifrit.Invoke(sigmon.New(group))

	server.ConfigureAPI(logger, activeDB)

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

	logger.Info("started")

	err = <-monitor.Wait()
	if sqlConn != nil {
		sqlConn.Close()
	}
	if err != nil {
		logger.Error("exited-with-failure", err)
		os.Exit(1)
	}
}

func appendSSLConnectionStringParam(logger lager.Logger, driverName, databaseConnectionString, sqlCACertFile string) string {
	switch driverName {
	case "mysql":
		if sqlCACertFile != "" {
			certBytes, err := ioutil.ReadFile(sqlCACertFile)
			if err != nil {
				logger.Fatal("failed-to-read-sql-ca-file", err)
			}

			caCertPool := x509.NewCertPool()
			if ok := caCertPool.AppendCertsFromPEM(certBytes); !ok {
				logger.Fatal("failed-to-parse-sql-ca", err)
			}

			tlsConfig := &tls.Config{
				InsecureSkipVerify: false,
				RootCAs:            caCertPool,
			}

			mysql.RegisterTLSConfig("vps-tls", tlsConfig)
			databaseConnectionString = fmt.Sprintf("%s?tls=vps-tls", databaseConnectionString)
		}
	case "postgres":
		if sqlCACertFile == "" {
			databaseConnectionString = fmt.Sprintf("%s?sslmode=disable", databaseConnectionString)
		} else {
			databaseConnectionString = fmt.Sprintf("%s?sslmode=verify-ca&sslrootcert=%s", databaseConnectionString, sqlCACertFile)
		}
	}

	return databaseConnectionString
}