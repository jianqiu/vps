package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"github.com/jianqiu/vps/models"
)

// UpdateVMWithStateHandlerFunc turns a function with the right signature into a update Vm with state handler
type UpdateVMWithStateHandlerFunc func(UpdateVMWithStateParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateVMWithStateHandlerFunc) Handle(params UpdateVMWithStateParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// UpdateVMWithStateHandler interface for that can handle valid update Vm with state params
type UpdateVMWithStateHandler interface {
	Handle(UpdateVMWithStateParams, *models.User) middleware.Responder
}

// NewUpdateVMWithState creates a new http.Handler for the update Vm with state operation
func NewUpdateVMWithState(ctx *middleware.Context, handler UpdateVMWithStateHandler) *UpdateVMWithState {
	return &UpdateVMWithState{Context: ctx, Handler: handler}
}

/*UpdateVMWithState swagger:route PUT /vms/{cid} vm updateVmWithState

Updates a vm in the pool with state

*/
type UpdateVMWithState struct {
	Context *middleware.Context
	Handler UpdateVMWithStateHandler
}

func (o *UpdateVMWithState) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewUpdateVMWithStateParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
