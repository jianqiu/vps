package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFindVmsByStatesParams creates a new FindVmsByStatesParams object
// with the default values initialized.
func NewFindVmsByStatesParams() FindVmsByStatesParams {
	var ()
	return FindVmsByStatesParams{}
}

// FindVmsByStatesParams contains all the bound params for the find vms by states operation
// typically these are obtained from a http.Request
//
// swagger:parameters findVmsByStates
type FindVmsByStatesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*States to filter by
	  In: query
	  Collection Format: multi
	*/
	States []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *FindVmsByStatesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qStates, qhkStates, _ := qs.GetOK("states")
	if err := o.bindStates(qStates, qhkStates, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *FindVmsByStatesParams) bindStates(rawData []string, hasKey bool, formats strfmt.Registry) error {

	raw := rawData
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, statesI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.States = ir

	return nil
}
