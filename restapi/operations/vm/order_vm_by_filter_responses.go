package vm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/jianqiu/vps/models"
)

/*OrderVMByFilterOK successful operation

swagger:response orderVmByFilterOK
*/
type OrderVMByFilterOK struct {

	// In: body
	Payload *models.VMResponse `json:"body,omitempty"`
}

// NewOrderVMByFilterOK creates OrderVMByFilterOK with default headers values
func NewOrderVMByFilterOK() *OrderVMByFilterOK {
	return &OrderVMByFilterOK{}
}

// WithPayload adds the payload to the order Vm by filter o k response
func (o *OrderVMByFilterOK) WithPayload(payload *models.VMResponse) *OrderVMByFilterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the order Vm by filter o k response
func (o *OrderVMByFilterOK) SetPayload(payload *models.VMResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OrderVMByFilterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*OrderVMByFilterNotFound vm not found

swagger:response orderVmByFilterNotFound
*/
type OrderVMByFilterNotFound struct {
}

// NewOrderVMByFilterNotFound creates OrderVMByFilterNotFound with default headers values
func NewOrderVMByFilterNotFound() *OrderVMByFilterNotFound {
	return &OrderVMByFilterNotFound{}
}

// WriteResponse to the client
func (o *OrderVMByFilterNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

/*OrderVMByFilterDefault unexpected error

swagger:response orderVmByFilterDefault
*/
type OrderVMByFilterDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewOrderVMByFilterDefault creates OrderVMByFilterDefault with default headers values
func NewOrderVMByFilterDefault(code int) *OrderVMByFilterDefault {
	if code <= 0 {
		code = 500
	}

	return &OrderVMByFilterDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the order Vm by filter default response
func (o *OrderVMByFilterDefault) WithStatusCode(code int) *OrderVMByFilterDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the order Vm by filter default response
func (o *OrderVMByFilterDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the order Vm by filter default response
func (o *OrderVMByFilterDefault) WithPayload(payload *models.Error) *OrderVMByFilterDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the order Vm by filter default response
func (o *OrderVMByFilterDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *OrderVMByFilterDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
