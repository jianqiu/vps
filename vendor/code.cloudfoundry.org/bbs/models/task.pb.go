// Code generated by protoc-gen-gogo.
// source: task.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Task_State int32

const (
	Task_Invalid   Task_State = 0
	Task_Pending   Task_State = 1
	Task_Running   Task_State = 2
	Task_Completed Task_State = 3
	Task_Resolving Task_State = 4
)

var Task_State_name = map[int32]string{
	0: "Invalid",
	1: "Pending",
	2: "Running",
	3: "Completed",
	4: "Resolving",
}
var Task_State_value = map[string]int32{
	"Invalid":   0,
	"Pending":   1,
	"Running":   2,
	"Completed": 3,
	"Resolving": 4,
}

func (x Task_State) Enum() *Task_State {
	p := new(Task_State)
	*p = x
	return p
}
func (x Task_State) MarshalJSON() ([]byte, error) {
	return proto.MarshalJSONEnum(Task_State_name, int32(x))
}
func (x *Task_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Task_State_value, data, "Task_State")
	if err != nil {
		return err
	}
	*x = Task_State(value)
	return nil
}
func (Task_State) EnumDescriptor() ([]byte, []int) { return fileDescriptorTask, []int{1, 0} }

type TaskDefinition struct {
	RootFs                        string                 `protobuf:"bytes,1,opt,name=root_fs,json=rootFs" json:"rootfs"`
	EnvironmentVariables          []*EnvironmentVariable `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables" json:"env,omitempty"`
	Action                        *Action                `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	DiskMb                        int32                  `protobuf:"varint,4,opt,name=disk_mb,json=diskMb" json:"disk_mb"`
	MemoryMb                      int32                  `protobuf:"varint,5,opt,name=memory_mb,json=memoryMb" json:"memory_mb"`
	CpuWeight                     uint32                 `protobuf:"varint,6,opt,name=cpu_weight,json=cpuWeight" json:"cpu_weight"`
	Privileged                    bool                   `protobuf:"varint,7,opt,name=privileged" json:"privileged"`
	LogSource                     string                 `protobuf:"bytes,8,opt,name=log_source,json=logSource" json:"log_source"`
	LogGuid                       string                 `protobuf:"bytes,9,opt,name=log_guid,json=logGuid" json:"log_guid"`
	MetricsGuid                   string                 `protobuf:"bytes,10,opt,name=metrics_guid,json=metricsGuid" json:"metrics_guid"`
	ResultFile                    string                 `protobuf:"bytes,11,opt,name=result_file,json=resultFile" json:"result_file"`
	CompletionCallbackUrl         string                 `protobuf:"bytes,12,opt,name=completion_callback_url,json=completionCallbackUrl" json:"completion_callback_url,omitempty"`
	Annotation                    string                 `protobuf:"bytes,13,opt,name=annotation" json:"annotation,omitempty"`
	EgressRules                   []*SecurityGroupRule   `protobuf:"bytes,14,rep,name=egress_rules,json=egressRules" json:"egress_rules,omitempty"`
	CachedDependencies            []*CachedDependency    `protobuf:"bytes,15,rep,name=cached_dependencies,json=cachedDependencies" json:"cached_dependencies,omitempty"`
	LegacyDownloadUser            string                 `protobuf:"bytes,16,opt,name=legacy_download_user,json=legacyDownloadUser" json:"legacy_download_user,omitempty"`
	TrustedSystemCertificatesPath string                 `protobuf:"bytes,17,opt,name=trusted_system_certificates_path,json=trustedSystemCertificatesPath" json:"trusted_system_certificates_path,omitempty"`
	VolumeMounts                  []*VolumeMount         `protobuf:"bytes,18,rep,name=volume_mounts,json=volumeMounts" json:"volume_mounts,omitempty"`
	Network                       *Network               `protobuf:"bytes,19,opt,name=network" json:"network,omitempty"`
	PlacementTags                 []string               `protobuf:"bytes,20,rep,name=PlacementTags,json=placementTags" json:"placement_tags,omitempty"`
}

func (m *TaskDefinition) Reset()                    { *m = TaskDefinition{} }
func (*TaskDefinition) ProtoMessage()               {}
func (*TaskDefinition) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

func (m *TaskDefinition) GetRootFs() string {
	if m != nil {
		return m.RootFs
	}
	return ""
}

func (m *TaskDefinition) GetEnvironmentVariables() []*EnvironmentVariable {
	if m != nil {
		return m.EnvironmentVariables
	}
	return nil
}

func (m *TaskDefinition) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *TaskDefinition) GetDiskMb() int32 {
	if m != nil {
		return m.DiskMb
	}
	return 0
}

func (m *TaskDefinition) GetMemoryMb() int32 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

func (m *TaskDefinition) GetCpuWeight() uint32 {
	if m != nil {
		return m.CpuWeight
	}
	return 0
}

func (m *TaskDefinition) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *TaskDefinition) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *TaskDefinition) GetLogGuid() string {
	if m != nil {
		return m.LogGuid
	}
	return ""
}

func (m *TaskDefinition) GetMetricsGuid() string {
	if m != nil {
		return m.MetricsGuid
	}
	return ""
}

func (m *TaskDefinition) GetResultFile() string {
	if m != nil {
		return m.ResultFile
	}
	return ""
}

func (m *TaskDefinition) GetCompletionCallbackUrl() string {
	if m != nil {
		return m.CompletionCallbackUrl
	}
	return ""
}

func (m *TaskDefinition) GetAnnotation() string {
	if m != nil {
		return m.Annotation
	}
	return ""
}

func (m *TaskDefinition) GetEgressRules() []*SecurityGroupRule {
	if m != nil {
		return m.EgressRules
	}
	return nil
}

func (m *TaskDefinition) GetCachedDependencies() []*CachedDependency {
	if m != nil {
		return m.CachedDependencies
	}
	return nil
}

func (m *TaskDefinition) GetLegacyDownloadUser() string {
	if m != nil {
		return m.LegacyDownloadUser
	}
	return ""
}

func (m *TaskDefinition) GetTrustedSystemCertificatesPath() string {
	if m != nil {
		return m.TrustedSystemCertificatesPath
	}
	return ""
}

func (m *TaskDefinition) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *TaskDefinition) GetNetwork() *Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *TaskDefinition) GetPlacementTags() []string {
	if m != nil {
		return m.PlacementTags
	}
	return nil
}

type Task struct {
	*TaskDefinition  `protobuf:"bytes,1,opt,name=task_definition,json=taskDefinition,embedded=task_definition" json:""`
	TaskGuid         string     `protobuf:"bytes,2,opt,name=task_guid,json=taskGuid" json:"task_guid"`
	Domain           string     `protobuf:"bytes,3,opt,name=domain" json:"domain"`
	CreatedAt        int64      `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at"`
	UpdatedAt        int64      `protobuf:"varint,5,opt,name=updated_at,json=updatedAt" json:"updated_at"`
	FirstCompletedAt int64      `protobuf:"varint,6,opt,name=first_completed_at,json=firstCompletedAt" json:"first_completed_at"`
	State            Task_State `protobuf:"varint,7,opt,name=state,enum=models.Task_State" json:"state"`
	CellId           string     `protobuf:"bytes,8,opt,name=cell_id,json=cellId" json:"cell_id"`
	Result           string     `protobuf:"bytes,9,opt,name=result" json:"result"`
	Failed           bool       `protobuf:"varint,10,opt,name=failed" json:"failed"`
	FailureReason    string     `protobuf:"bytes,11,opt,name=failure_reason,json=failureReason" json:"failure_reason"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{1} }

func (m *Task) GetTaskGuid() string {
	if m != nil {
		return m.TaskGuid
	}
	return ""
}

func (m *Task) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Task) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Task) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Task) GetFirstCompletedAt() int64 {
	if m != nil {
		return m.FirstCompletedAt
	}
	return 0
}

func (m *Task) GetState() Task_State {
	if m != nil {
		return m.State
	}
	return Task_Invalid
}

func (m *Task) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

func (m *Task) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Task) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *Task) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskDefinition)(nil), "models.TaskDefinition")
	proto.RegisterType((*Task)(nil), "models.Task")
	proto.RegisterEnum("models.Task_State", Task_State_name, Task_State_value)
}
func (x Task_State) String() string {
	s, ok := Task_State_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TaskDefinition) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskDefinition)
	if !ok {
		that2, ok := that.(TaskDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.RootFs != that1.RootFs {
		return false
	}
	if len(this.EnvironmentVariables) != len(that1.EnvironmentVariables) {
		return false
	}
	for i := range this.EnvironmentVariables {
		if !this.EnvironmentVariables[i].Equal(that1.EnvironmentVariables[i]) {
			return false
		}
	}
	if !this.Action.Equal(that1.Action) {
		return false
	}
	if this.DiskMb != that1.DiskMb {
		return false
	}
	if this.MemoryMb != that1.MemoryMb {
		return false
	}
	if this.CpuWeight != that1.CpuWeight {
		return false
	}
	if this.Privileged != that1.Privileged {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.LogGuid != that1.LogGuid {
		return false
	}
	if this.MetricsGuid != that1.MetricsGuid {
		return false
	}
	if this.ResultFile != that1.ResultFile {
		return false
	}
	if this.CompletionCallbackUrl != that1.CompletionCallbackUrl {
		return false
	}
	if this.Annotation != that1.Annotation {
		return false
	}
	if len(this.EgressRules) != len(that1.EgressRules) {
		return false
	}
	for i := range this.EgressRules {
		if !this.EgressRules[i].Equal(that1.EgressRules[i]) {
			return false
		}
	}
	if len(this.CachedDependencies) != len(that1.CachedDependencies) {
		return false
	}
	for i := range this.CachedDependencies {
		if !this.CachedDependencies[i].Equal(that1.CachedDependencies[i]) {
			return false
		}
	}
	if this.LegacyDownloadUser != that1.LegacyDownloadUser {
		return false
	}
	if this.TrustedSystemCertificatesPath != that1.TrustedSystemCertificatesPath {
		return false
	}
	if len(this.VolumeMounts) != len(that1.VolumeMounts) {
		return false
	}
	for i := range this.VolumeMounts {
		if !this.VolumeMounts[i].Equal(that1.VolumeMounts[i]) {
			return false
		}
	}
	if !this.Network.Equal(that1.Network) {
		return false
	}
	if len(this.PlacementTags) != len(that1.PlacementTags) {
		return false
	}
	for i := range this.PlacementTags {
		if this.PlacementTags[i] != that1.PlacementTags[i] {
			return false
		}
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TaskDefinition.Equal(that1.TaskDefinition) {
		return false
	}
	if this.TaskGuid != that1.TaskGuid {
		return false
	}
	if this.Domain != that1.Domain {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	if this.FirstCompletedAt != that1.FirstCompletedAt {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	if this.Failed != that1.Failed {
		return false
	}
	if this.FailureReason != that1.FailureReason {
		return false
	}
	return true
}
func (this *TaskDefinition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&models.TaskDefinition{")
	s = append(s, "RootFs: "+fmt.Sprintf("%#v", this.RootFs)+",\n")
	if this.EnvironmentVariables != nil {
		s = append(s, "EnvironmentVariables: "+fmt.Sprintf("%#v", this.EnvironmentVariables)+",\n")
	}
	if this.Action != nil {
		s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	}
	s = append(s, "DiskMb: "+fmt.Sprintf("%#v", this.DiskMb)+",\n")
	s = append(s, "MemoryMb: "+fmt.Sprintf("%#v", this.MemoryMb)+",\n")
	s = append(s, "CpuWeight: "+fmt.Sprintf("%#v", this.CpuWeight)+",\n")
	s = append(s, "Privileged: "+fmt.Sprintf("%#v", this.Privileged)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "LogGuid: "+fmt.Sprintf("%#v", this.LogGuid)+",\n")
	s = append(s, "MetricsGuid: "+fmt.Sprintf("%#v", this.MetricsGuid)+",\n")
	s = append(s, "ResultFile: "+fmt.Sprintf("%#v", this.ResultFile)+",\n")
	s = append(s, "CompletionCallbackUrl: "+fmt.Sprintf("%#v", this.CompletionCallbackUrl)+",\n")
	s = append(s, "Annotation: "+fmt.Sprintf("%#v", this.Annotation)+",\n")
	if this.EgressRules != nil {
		s = append(s, "EgressRules: "+fmt.Sprintf("%#v", this.EgressRules)+",\n")
	}
	if this.CachedDependencies != nil {
		s = append(s, "CachedDependencies: "+fmt.Sprintf("%#v", this.CachedDependencies)+",\n")
	}
	s = append(s, "LegacyDownloadUser: "+fmt.Sprintf("%#v", this.LegacyDownloadUser)+",\n")
	s = append(s, "TrustedSystemCertificatesPath: "+fmt.Sprintf("%#v", this.TrustedSystemCertificatesPath)+",\n")
	if this.VolumeMounts != nil {
		s = append(s, "VolumeMounts: "+fmt.Sprintf("%#v", this.VolumeMounts)+",\n")
	}
	if this.Network != nil {
		s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	}
	if this.PlacementTags != nil {
		s = append(s, "PlacementTags: "+fmt.Sprintf("%#v", this.PlacementTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&models.Task{")
	if this.TaskDefinition != nil {
		s = append(s, "TaskDefinition: "+fmt.Sprintf("%#v", this.TaskDefinition)+",\n")
	}
	s = append(s, "TaskGuid: "+fmt.Sprintf("%#v", this.TaskGuid)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "FirstCompletedAt: "+fmt.Sprintf("%#v", this.FirstCompletedAt)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Failed: "+fmt.Sprintf("%#v", this.Failed)+",\n")
	s = append(s, "FailureReason: "+fmt.Sprintf("%#v", this.FailureReason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTask(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTask(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *TaskDefinition) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TaskDefinition) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintTask(data, i, uint64(len(m.RootFs)))
	i += copy(data[i:], m.RootFs)
	if len(m.EnvironmentVariables) > 0 {
		for _, msg := range m.EnvironmentVariables {
			data[i] = 0x12
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Action != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintTask(data, i, uint64(m.Action.Size()))
		n1, err := m.Action.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	data[i] = 0x20
	i++
	i = encodeVarintTask(data, i, uint64(m.DiskMb))
	data[i] = 0x28
	i++
	i = encodeVarintTask(data, i, uint64(m.MemoryMb))
	data[i] = 0x30
	i++
	i = encodeVarintTask(data, i, uint64(m.CpuWeight))
	data[i] = 0x38
	i++
	if m.Privileged {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	data[i] = 0x42
	i++
	i = encodeVarintTask(data, i, uint64(len(m.LogSource)))
	i += copy(data[i:], m.LogSource)
	data[i] = 0x4a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.LogGuid)))
	i += copy(data[i:], m.LogGuid)
	data[i] = 0x52
	i++
	i = encodeVarintTask(data, i, uint64(len(m.MetricsGuid)))
	i += copy(data[i:], m.MetricsGuid)
	data[i] = 0x5a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.ResultFile)))
	i += copy(data[i:], m.ResultFile)
	data[i] = 0x62
	i++
	i = encodeVarintTask(data, i, uint64(len(m.CompletionCallbackUrl)))
	i += copy(data[i:], m.CompletionCallbackUrl)
	data[i] = 0x6a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.Annotation)))
	i += copy(data[i:], m.Annotation)
	if len(m.EgressRules) > 0 {
		for _, msg := range m.EgressRules {
			data[i] = 0x72
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CachedDependencies) > 0 {
		for _, msg := range m.CachedDependencies {
			data[i] = 0x7a
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	data[i] = 0x82
	i++
	data[i] = 0x1
	i++
	i = encodeVarintTask(data, i, uint64(len(m.LegacyDownloadUser)))
	i += copy(data[i:], m.LegacyDownloadUser)
	data[i] = 0x8a
	i++
	data[i] = 0x1
	i++
	i = encodeVarintTask(data, i, uint64(len(m.TrustedSystemCertificatesPath)))
	i += copy(data[i:], m.TrustedSystemCertificatesPath)
	if len(m.VolumeMounts) > 0 {
		for _, msg := range m.VolumeMounts {
			data[i] = 0x92
			i++
			data[i] = 0x1
			i++
			i = encodeVarintTask(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Network != nil {
		data[i] = 0x9a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTask(data, i, uint64(m.Network.Size()))
		n2, err := m.Network.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.PlacementTags) > 0 {
		for _, s := range m.PlacementTags {
			data[i] = 0xa2
			i++
			data[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *Task) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Task) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskDefinition != nil {
		data[i] = 0xa
		i++
		i = encodeVarintTask(data, i, uint64(m.TaskDefinition.Size()))
		n3, err := m.TaskDefinition.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	data[i] = 0x12
	i++
	i = encodeVarintTask(data, i, uint64(len(m.TaskGuid)))
	i += copy(data[i:], m.TaskGuid)
	data[i] = 0x1a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.Domain)))
	i += copy(data[i:], m.Domain)
	data[i] = 0x20
	i++
	i = encodeVarintTask(data, i, uint64(m.CreatedAt))
	data[i] = 0x28
	i++
	i = encodeVarintTask(data, i, uint64(m.UpdatedAt))
	data[i] = 0x30
	i++
	i = encodeVarintTask(data, i, uint64(m.FirstCompletedAt))
	data[i] = 0x38
	i++
	i = encodeVarintTask(data, i, uint64(m.State))
	data[i] = 0x42
	i++
	i = encodeVarintTask(data, i, uint64(len(m.CellId)))
	i += copy(data[i:], m.CellId)
	data[i] = 0x4a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.Result)))
	i += copy(data[i:], m.Result)
	data[i] = 0x50
	i++
	if m.Failed {
		data[i] = 1
	} else {
		data[i] = 0
	}
	i++
	data[i] = 0x5a
	i++
	i = encodeVarintTask(data, i, uint64(len(m.FailureReason)))
	i += copy(data[i:], m.FailureReason)
	return i, nil
}

func encodeFixed64Task(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Task(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTask(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TaskDefinition) Size() (n int) {
	var l int
	_ = l
	l = len(m.RootFs)
	n += 1 + l + sovTask(uint64(l))
	if len(m.EnvironmentVariables) > 0 {
		for _, e := range m.EnvironmentVariables {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	n += 1 + sovTask(uint64(m.DiskMb))
	n += 1 + sovTask(uint64(m.MemoryMb))
	n += 1 + sovTask(uint64(m.CpuWeight))
	n += 2
	l = len(m.LogSource)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.LogGuid)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.MetricsGuid)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.ResultFile)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.CompletionCallbackUrl)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.Annotation)
	n += 1 + l + sovTask(uint64(l))
	if len(m.EgressRules) > 0 {
		for _, e := range m.EgressRules {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.CachedDependencies) > 0 {
		for _, e := range m.CachedDependencies {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	l = len(m.LegacyDownloadUser)
	n += 2 + l + sovTask(uint64(l))
	l = len(m.TrustedSystemCertificatesPath)
	n += 2 + l + sovTask(uint64(l))
	if len(m.VolumeMounts) > 0 {
		for _, e := range m.VolumeMounts {
			l = e.Size()
			n += 2 + l + sovTask(uint64(l))
		}
	}
	if m.Network != nil {
		l = m.Network.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if len(m.PlacementTags) > 0 {
		for _, s := range m.PlacementTags {
			l = len(s)
			n += 2 + l + sovTask(uint64(l))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	var l int
	_ = l
	if m.TaskDefinition != nil {
		l = m.TaskDefinition.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.TaskGuid)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.Domain)
	n += 1 + l + sovTask(uint64(l))
	n += 1 + sovTask(uint64(m.CreatedAt))
	n += 1 + sovTask(uint64(m.UpdatedAt))
	n += 1 + sovTask(uint64(m.FirstCompletedAt))
	n += 1 + sovTask(uint64(m.State))
	l = len(m.CellId)
	n += 1 + l + sovTask(uint64(l))
	l = len(m.Result)
	n += 1 + l + sovTask(uint64(l))
	n += 2
	l = len(m.FailureReason)
	n += 1 + l + sovTask(uint64(l))
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TaskDefinition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskDefinition{`,
		`RootFs:` + fmt.Sprintf("%v", this.RootFs) + `,`,
		`EnvironmentVariables:` + strings.Replace(fmt.Sprintf("%v", this.EnvironmentVariables), "EnvironmentVariable", "EnvironmentVariable", 1) + `,`,
		`Action:` + strings.Replace(fmt.Sprintf("%v", this.Action), "Action", "Action", 1) + `,`,
		`DiskMb:` + fmt.Sprintf("%v", this.DiskMb) + `,`,
		`MemoryMb:` + fmt.Sprintf("%v", this.MemoryMb) + `,`,
		`CpuWeight:` + fmt.Sprintf("%v", this.CpuWeight) + `,`,
		`Privileged:` + fmt.Sprintf("%v", this.Privileged) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`LogGuid:` + fmt.Sprintf("%v", this.LogGuid) + `,`,
		`MetricsGuid:` + fmt.Sprintf("%v", this.MetricsGuid) + `,`,
		`ResultFile:` + fmt.Sprintf("%v", this.ResultFile) + `,`,
		`CompletionCallbackUrl:` + fmt.Sprintf("%v", this.CompletionCallbackUrl) + `,`,
		`Annotation:` + fmt.Sprintf("%v", this.Annotation) + `,`,
		`EgressRules:` + strings.Replace(fmt.Sprintf("%v", this.EgressRules), "SecurityGroupRule", "SecurityGroupRule", 1) + `,`,
		`CachedDependencies:` + strings.Replace(fmt.Sprintf("%v", this.CachedDependencies), "CachedDependency", "CachedDependency", 1) + `,`,
		`LegacyDownloadUser:` + fmt.Sprintf("%v", this.LegacyDownloadUser) + `,`,
		`TrustedSystemCertificatesPath:` + fmt.Sprintf("%v", this.TrustedSystemCertificatesPath) + `,`,
		`VolumeMounts:` + strings.Replace(fmt.Sprintf("%v", this.VolumeMounts), "VolumeMount", "VolumeMount", 1) + `,`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "Network", 1) + `,`,
		`PlacementTags:` + fmt.Sprintf("%v", this.PlacementTags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Task{`,
		`TaskDefinition:` + strings.Replace(fmt.Sprintf("%v", this.TaskDefinition), "TaskDefinition", "TaskDefinition", 1) + `,`,
		`TaskGuid:` + fmt.Sprintf("%v", this.TaskGuid) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`UpdatedAt:` + fmt.Sprintf("%v", this.UpdatedAt) + `,`,
		`FirstCompletedAt:` + fmt.Sprintf("%v", this.FirstCompletedAt) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Failed:` + fmt.Sprintf("%v", this.Failed) + `,`,
		`FailureReason:` + fmt.Sprintf("%v", this.FailureReason) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTask(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TaskDefinition) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootFs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootFs = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentVariables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentVariables = append(m.EnvironmentVariables, &EnvironmentVariable{})
			if err := m.EnvironmentVariables[len(m.EnvironmentVariables)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &Action{}
			}
			if err := m.Action.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskMb", wireType)
			}
			m.DiskMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DiskMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMb", wireType)
			}
			m.MemoryMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuWeight", wireType)
			}
			m.CpuWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CpuWeight |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Privileged = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogGuid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricsGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricsGuid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultFile = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionCallbackUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionCallbackUrl = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Annotation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgressRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EgressRules = append(m.EgressRules, &SecurityGroupRule{})
			if err := m.EgressRules[len(m.EgressRules)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedDependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CachedDependencies = append(m.CachedDependencies, &CachedDependency{})
			if err := m.CachedDependencies[len(m.CachedDependencies)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyDownloadUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegacyDownloadUser = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustedSystemCertificatesPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustedSystemCertificatesPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeMounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeMounts = append(m.VolumeMounts, &VolumeMount{})
			if err := m.VolumeMounts[len(m.VolumeMounts)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Network == nil {
				m.Network = &Network{}
			}
			if err := m.Network.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementTags = append(m.PlacementTags, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskDefinition == nil {
				m.TaskDefinition = &TaskDefinition{}
			}
			if err := m.TaskDefinition.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskGuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskGuid = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstCompletedAt", wireType)
			}
			m.FirstCompletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FirstCompletedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (Task_State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failed = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("task.proto", fileDescriptorTask) }

var fileDescriptorTask = []byte{
	// 1048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x4f, 0x23, 0x37,
	0x1c, 0xc6, 0x19, 0x5e, 0xf2, 0xe2, 0x90, 0x00, 0x06, 0x96, 0x29, 0x2c, 0x93, 0x40, 0xdb, 0xdd,
	0xb4, 0xdd, 0x66, 0xa5, 0x9c, 0x7b, 0x28, 0x81, 0xee, 0x0a, 0xa9, 0x54, 0x28, 0x2c, 0xdb, 0xbd,
	0x8d, 0x9c, 0x19, 0x67, 0xb0, 0xf0, 0x8c, 0x47, 0xb6, 0x27, 0x28, 0xea, 0xa5, 0xa7, 0x9e, 0x7b,
	0xea, 0x67, 0xe8, 0x47, 0xd9, 0x23, 0xc7, 0x9e, 0xa2, 0x92, 0x5e, 0xaa, 0x9c, 0xf6, 0x23, 0x54,
	0xf6, 0x78, 0xc0, 0x69, 0xa9, 0xf6, 0x94, 0xf8, 0x79, 0x7e, 0xfe, 0xdb, 0x63, 0xfb, 0xff, 0x00,
	0x20, 0x91, 0xb8, 0xee, 0xa4, 0x9c, 0x49, 0x06, 0x4b, 0x31, 0x0b, 0x31, 0x15, 0xbb, 0x5f, 0x47,
	0x44, 0x5e, 0x65, 0x83, 0x4e, 0xc0, 0xe2, 0x97, 0x11, 0x8b, 0xd8, 0x4b, 0x6d, 0x0f, 0xb2, 0xa1,
	0x1e, 0xe9, 0x81, 0xfe, 0x97, 0x4f, 0xdb, 0xad, 0xa3, 0x40, 0x12, 0x96, 0x08, 0x33, 0xdc, 0xc3,
	0xc9, 0x88, 0x70, 0x96, 0xc4, 0x38, 0x91, 0xfe, 0x08, 0x71, 0x82, 0x06, 0x14, 0x17, 0xe6, 0x96,
	0xc0, 0x41, 0xc6, 0x89, 0x1c, 0xfb, 0x11, 0x67, 0x59, 0x6a, 0xd4, 0x9d, 0x00, 0x05, 0x57, 0x38,
	0xf4, 0x43, 0x9c, 0xe2, 0x24, 0xc4, 0x49, 0x30, 0x36, 0x06, 0x1c, 0x31, 0x9a, 0xc5, 0xd8, 0x8f,
	0x59, 0x96, 0xc8, 0x62, 0xb9, 0x04, 0xcb, 0x1b, 0xc6, 0xcd, 0xa6, 0x0f, 0x7f, 0x01, 0xa0, 0xf1,
	0x06, 0x89, 0xeb, 0x13, 0x3c, 0x24, 0x09, 0x51, 0x1b, 0x81, 0xcf, 0x41, 0x99, 0x33, 0x26, 0xfd,
	0xa1, 0x70, 0x9d, 0x96, 0xd3, 0xae, 0xf6, 0x1a, 0xef, 0x27, 0xcd, 0x85, 0xd9, 0xa4, 0x59, 0x52,
	0xf2, 0x50, 0xf4, 0xf5, 0xef, 0x2b, 0x01, 0x03, 0xb0, 0xfd, 0xe8, 0x66, 0xdd, 0xc5, 0xd6, 0x52,
	0xbb, 0xd6, 0xdd, 0xeb, 0xe4, 0x07, 0xd2, 0xf9, 0xee, 0x01, 0x7a, 0x6b, 0x98, 0xde, 0xc6, 0x6c,
	0xd2, 0xac, 0xe3, 0x64, 0xf4, 0x82, 0xc5, 0x44, 0xe2, 0x38, 0x95, 0xe3, 0xfe, 0x16, 0xfe, 0x2f,
	0x27, 0xe0, 0x33, 0x50, 0xca, 0x0f, 0xc8, 0x5d, 0x6a, 0x39, 0xed, 0x5a, 0xb7, 0x51, 0x54, 0x3d,
	0xd2, 0x6a, 0xdf, 0xb8, 0x70, 0x1f, 0x94, 0x43, 0x22, 0xae, 0xfd, 0x78, 0xe0, 0x2e, 0xb7, 0x9c,
	0xf6, 0x4a, 0x6f, 0x59, 0xed, 0xba, 0x5f, 0x52, 0xe2, 0xd9, 0x00, 0x1e, 0x80, 0x6a, 0x8c, 0x63,
	0xc6, 0xc7, 0x0a, 0x58, 0xb1, 0x80, 0x4a, 0x2e, 0x9f, 0x0d, 0xe0, 0xa7, 0x00, 0x04, 0x69, 0xe6,
	0xdf, 0x60, 0x12, 0x5d, 0x49, 0xb7, 0xd4, 0x72, 0xda, 0x75, 0xc3, 0x54, 0x83, 0x34, 0xfb, 0x51,
	0xcb, 0xf0, 0x33, 0x00, 0x52, 0x4e, 0x46, 0x84, 0xe2, 0x08, 0x87, 0x6e, 0xb9, 0xe5, 0xb4, 0x2b,
	0x06, 0xb2, 0x74, 0x55, 0x8a, 0xb2, 0xc8, 0x17, 0x2c, 0xe3, 0x01, 0x76, 0x2b, 0xfa, 0x14, 0x4d,
	0x29, 0xca, 0xa2, 0x0b, 0x2d, 0xc3, 0x26, 0xa8, 0x28, 0x28, 0xca, 0x48, 0xe8, 0x56, 0x2d, 0xa4,
	0x4c, 0x59, 0xf4, 0x3a, 0x23, 0x21, 0x7c, 0x0e, 0x56, 0x63, 0x2c, 0x39, 0x09, 0x44, 0x0e, 0x01,
	0x0b, 0xaa, 0x19, 0x47, 0x83, 0x9f, 0x83, 0x1a, 0xc7, 0x22, 0xa3, 0xd2, 0x1f, 0x12, 0x8a, 0xdd,
	0x9a, 0xc5, 0x81, 0xdc, 0x78, 0x45, 0x28, 0x86, 0x08, 0xec, 0x04, 0x2c, 0x4e, 0x29, 0x56, 0x07,
	0xe6, 0x07, 0x88, 0xd2, 0x01, 0x0a, 0xae, 0xfd, 0x8c, 0x53, 0x77, 0x55, 0x4f, 0xf9, 0xc2, 0x5c,
	0xf4, 0xc1, 0xff, 0x60, 0xd6, 0x65, 0x6d, 0x3f, 0x20, 0xc7, 0x86, 0xb8, 0xe4, 0x14, 0x7e, 0x03,
	0x00, 0x4a, 0x12, 0x26, 0x91, 0xbe, 0xb1, 0xba, 0xae, 0xfa, 0xd4, 0x54, 0xdd, 0x7a, 0x70, 0xac,
	0x42, 0x16, 0x0f, 0xdf, 0x81, 0x55, 0x1c, 0x71, 0x2c, 0x84, 0xcf, 0x33, 0xf5, 0x8e, 0x1a, 0xfa,
	0x1d, 0x7d, 0x52, 0xdc, 0xf8, 0x85, 0x79, 0xfc, 0xaf, 0xd5, 0xdb, 0xef, 0x67, 0x14, 0xf7, 0x76,
	0x67, 0x93, 0xe6, 0x13, 0x7b, 0x8a, 0x55, 0xb8, 0x96, 0xeb, 0x8a, 0x13, 0x90, 0x82, 0xcd, 0x7f,
	0x37, 0x09, 0xc1, 0xc2, 0x5d, 0xd3, 0x0b, 0xb8, 0xc5, 0x02, 0xc7, 0x1a, 0x39, 0xb9, 0x6f, 0xa3,
	0xde, 0xc1, 0x6c, 0xd2, 0xdc, 0x7f, 0x64, 0xa2, 0xb5, 0x0c, 0x0c, 0xe6, 0x27, 0x11, 0x2c, 0xe0,
	0x3b, 0xb0, 0x45, 0x71, 0x84, 0x82, 0xb1, 0x1f, 0xb2, 0x9b, 0x84, 0x32, 0x14, 0xfa, 0x99, 0xc0,
	0xdc, 0x5d, 0xd7, 0xe7, 0xf1, 0xcc, 0x9c, 0x87, 0xf7, 0x18, 0x63, 0x57, 0xce, 0xfd, 0x13, 0x63,
	0x5f, 0x0a, 0xcc, 0xe1, 0x4f, 0xa0, 0x25, 0x79, 0x26, 0x24, 0x0e, 0x7d, 0x31, 0x16, 0x12, 0xc7,
	0x7e, 0x80, 0xb9, 0x24, 0x43, 0x12, 0x20, 0x89, 0x85, 0x9f, 0x22, 0x79, 0xe5, 0x6e, 0xe8, 0x55,
	0xba, 0x66, 0x95, 0x2f, 0x3f, 0xc6, 0x5b, 0x2b, 0xee, 0x1b, 0xf6, 0x42, 0xa3, 0xc7, 0x16, 0x79,
	0x8e, 0xe4, 0x15, 0xbc, 0x04, 0x75, 0x3b, 0x50, 0x84, 0x0b, 0xf5, 0xf1, 0x6d, 0x16, 0xc7, 0xf7,
	0x56, 0x9b, 0x67, 0xca, 0xeb, 0xed, 0xcd, 0x26, 0xcd, 0x9d, 0x39, 0xda, 0x5a, 0x67, 0x75, 0xf4,
	0x40, 0x0a, 0xf8, 0x2d, 0x28, 0x9b, 0x4c, 0x72, 0x37, 0x75, 0x8b, 0xaf, 0x15, 0x05, 0x7f, 0xc8,
	0xe5, 0xde, 0xf6, 0x6c, 0xd2, 0xdc, 0x30, 0x8c, 0x55, 0xa6, 0x98, 0x06, 0x7b, 0xa0, 0x7e, 0x4e,
	0x51, 0x80, 0x55, 0x72, 0xbc, 0x41, 0x91, 0x70, 0xb7, 0x5a, 0x4b, 0xea, 0xe1, 0xcd, 0x26, 0x4d,
	0x37, 0x2d, 0x0c, 0x5f, 0xa2, 0xc8, 0xde, 0x44, 0x3d, 0xb5, 0xa7, 0x1c, 0xfe, 0xb6, 0x0c, 0x96,
	0x55, 0x10, 0xc2, 0x53, 0xb0, 0xa6, 0x42, 0xdd, 0x0f, 0xef, 0x13, 0x51, 0xc7, 0x60, 0xad, 0xfb,
	0xa4, 0xd8, 0xd6, 0x7c, 0x5e, 0xf6, 0x2a, 0xb7, 0x93, 0xa6, 0x33, 0x53, 0xcd, 0xd6, 0x90, 0xf3,
	0x49, 0x7a, 0x00, 0xaa, 0xba, 0x94, 0xee, 0xde, 0x45, 0xab, 0x2b, 0x2b, 0x4a, 0xd6, 0xad, 0xfb,
	0x14, 0x94, 0x42, 0x16, 0x23, 0x92, 0xc7, 0x5b, 0xf5, 0x3e, 0xb5, 0xb4, 0xa6, 0x23, 0x89, 0x63,
	0xa4, 0xae, 0x0f, 0x49, 0x9d, 0x6b, 0x4b, 0xf7, 0x91, 0x94, 0xeb, 0x47, 0x52, 0x41, 0x59, 0x1a,
	0x16, 0xd0, 0x8a, 0x0d, 0x19, 0xfd, 0x48, 0xc2, 0x2e, 0x80, 0x43, 0xc2, 0x85, 0xf4, 0x4d, 0xdf,
	0xe6, 0x70, 0xc9, 0x82, 0xd7, 0xb5, 0x7f, 0x5c, 0xd8, 0x47, 0x12, 0x76, 0xc0, 0x8a, 0x90, 0x48,
	0x62, 0x1d, 0x73, 0x8d, 0x2e, 0xb4, 0xbf, 0xbf, 0x73, 0xa1, 0x1c, 0x33, 0x35, 0xc7, 0x54, 0x04,
	0x07, 0x98, 0x52, 0x9f, 0x84, 0x73, 0x91, 0x57, 0x52, 0xe2, 0xa9, 0xfe, 0xd4, 0x3c, 0x8c, 0xe6,
	0xd2, 0xce, 0x68, 0xca, 0x1d, 0x22, 0x42, 0x71, 0x1e, 0x73, 0x45, 0xa8, 0x1a, 0x0d, 0x7e, 0x05,
	0x1a, 0xea, 0x5f, 0xc6, 0xb1, 0xcf, 0x31, 0x12, 0x2c, 0x99, 0x0b, 0xb9, 0xba, 0xf1, 0xfa, 0xda,
	0x3a, 0xfc, 0x1e, 0xac, 0xe8, 0xdd, 0xc1, 0x1a, 0x28, 0x9f, 0x26, 0x23, 0x44, 0x49, 0xb8, 0xbe,
	0xa0, 0x06, 0xe7, 0x38, 0x09, 0x49, 0x12, 0xad, 0x3b, 0x6a, 0xd0, 0xcf, 0x92, 0x44, 0x0d, 0x16,
	0x61, 0x1d, 0x54, 0xef, 0x3f, 0x7b, 0x7d, 0x49, 0x0d, 0xfb, 0x58, 0x30, 0x3a, 0x52, 0xee, 0x72,
	0xef, 0xc5, 0xed, 0x9d, 0xe7, 0xfc, 0x71, 0xe7, 0x2d, 0x7c, 0xb8, 0xf3, 0x9c, 0x9f, 0xa7, 0x9e,
	0xf3, 0xfb, 0xd4, 0x73, 0xde, 0x4f, 0x3d, 0xe7, 0x76, 0xea, 0x39, 0x7f, 0x4e, 0x3d, 0xe7, 0xef,
	0xa9, 0xb7, 0xf0, 0x61, 0xea, 0x39, 0xbf, 0xfe, 0xe5, 0x2d, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x2f, 0x57, 0xad, 0x7e, 0x11, 0x08, 0x00, 0x00,
}
