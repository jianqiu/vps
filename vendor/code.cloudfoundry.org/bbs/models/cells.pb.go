// Code generated by protoc-gen-gogo.
// source: cells.proto
// DO NOT EDIT!

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CellCapacity struct {
	MemoryMb   int32 `protobuf:"varint,1,opt,name=memory_mb,json=memoryMb" json:"memory_mb"`
	DiskMb     int32 `protobuf:"varint,2,opt,name=disk_mb,json=diskMb" json:"disk_mb"`
	Containers int32 `protobuf:"varint,3,opt,name=containers" json:"containers"`
}

func (m *CellCapacity) Reset()                    { *m = CellCapacity{} }
func (*CellCapacity) ProtoMessage()               {}
func (*CellCapacity) Descriptor() ([]byte, []int) { return fileDescriptorCells, []int{0} }

func (m *CellCapacity) GetMemoryMb() int32 {
	if m != nil {
		return m.MemoryMb
	}
	return 0
}

func (m *CellCapacity) GetDiskMb() int32 {
	if m != nil {
		return m.DiskMb
	}
	return 0
}

func (m *CellCapacity) GetContainers() int32 {
	if m != nil {
		return m.Containers
	}
	return 0
}

type CellPresence struct {
	CellId                string        `protobuf:"bytes,1,opt,name=cell_id,json=cellId" json:"cell_id"`
	RepAddress            string        `protobuf:"bytes,2,opt,name=rep_address,json=repAddress" json:"rep_address"`
	Zone                  string        `protobuf:"bytes,3,opt,name=zone" json:"zone"`
	Capacity              *CellCapacity `protobuf:"bytes,4,opt,name=capacity" json:"capacity,omitempty"`
	RootfsProviders       []*Provider   `protobuf:"bytes,5,rep,name=rootfs_providers,json=rootfsProviders" json:"rootfs_provider_list,omitempty"`
	PlacementTags         []string      `protobuf:"bytes,6,rep,name=placement_tags,json=placementTags" json:"placement_tags,omitempty"`
	OptionalPlacementTags []string      `protobuf:"bytes,7,rep,name=optional_placement_tags,json=optionalPlacementTags" json:"optional_placement_tags,omitempty"`
}

func (m *CellPresence) Reset()                    { *m = CellPresence{} }
func (*CellPresence) ProtoMessage()               {}
func (*CellPresence) Descriptor() ([]byte, []int) { return fileDescriptorCells, []int{1} }

func (m *CellPresence) GetCellId() string {
	if m != nil {
		return m.CellId
	}
	return ""
}

func (m *CellPresence) GetRepAddress() string {
	if m != nil {
		return m.RepAddress
	}
	return ""
}

func (m *CellPresence) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *CellPresence) GetCapacity() *CellCapacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *CellPresence) GetRootfsProviders() []*Provider {
	if m != nil {
		return m.RootfsProviders
	}
	return nil
}

func (m *CellPresence) GetPlacementTags() []string {
	if m != nil {
		return m.PlacementTags
	}
	return nil
}

func (m *CellPresence) GetOptionalPlacementTags() []string {
	if m != nil {
		return m.OptionalPlacementTags
	}
	return nil
}

type Provider struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name"`
	Properties []string `protobuf:"bytes,2,rep,name=properties" json:"properties,omitempty"`
}

func (m *Provider) Reset()                    { *m = Provider{} }
func (*Provider) ProtoMessage()               {}
func (*Provider) Descriptor() ([]byte, []int) { return fileDescriptorCells, []int{2} }

func (m *Provider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Provider) GetProperties() []string {
	if m != nil {
		return m.Properties
	}
	return nil
}

type CellsResponse struct {
	Error *Error          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Cells []*CellPresence `protobuf:"bytes,2,rep,name=cells" json:"cells,omitempty"`
}

func (m *CellsResponse) Reset()                    { *m = CellsResponse{} }
func (*CellsResponse) ProtoMessage()               {}
func (*CellsResponse) Descriptor() ([]byte, []int) { return fileDescriptorCells, []int{3} }

func (m *CellsResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CellsResponse) GetCells() []*CellPresence {
	if m != nil {
		return m.Cells
	}
	return nil
}

func init() {
	proto.RegisterType((*CellCapacity)(nil), "models.CellCapacity")
	proto.RegisterType((*CellPresence)(nil), "models.CellPresence")
	proto.RegisterType((*Provider)(nil), "models.Provider")
	proto.RegisterType((*CellsResponse)(nil), "models.CellsResponse")
}
func (this *CellCapacity) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CellCapacity)
	if !ok {
		that2, ok := that.(CellCapacity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.MemoryMb != that1.MemoryMb {
		return false
	}
	if this.DiskMb != that1.DiskMb {
		return false
	}
	if this.Containers != that1.Containers {
		return false
	}
	return true
}
func (this *CellPresence) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CellPresence)
	if !ok {
		that2, ok := that.(CellPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.CellId != that1.CellId {
		return false
	}
	if this.RepAddress != that1.RepAddress {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if !this.Capacity.Equal(that1.Capacity) {
		return false
	}
	if len(this.RootfsProviders) != len(that1.RootfsProviders) {
		return false
	}
	for i := range this.RootfsProviders {
		if !this.RootfsProviders[i].Equal(that1.RootfsProviders[i]) {
			return false
		}
	}
	if len(this.PlacementTags) != len(that1.PlacementTags) {
		return false
	}
	for i := range this.PlacementTags {
		if this.PlacementTags[i] != that1.PlacementTags[i] {
			return false
		}
	}
	if len(this.OptionalPlacementTags) != len(that1.OptionalPlacementTags) {
		return false
	}
	for i := range this.OptionalPlacementTags {
		if this.OptionalPlacementTags[i] != that1.OptionalPlacementTags[i] {
			return false
		}
	}
	return true
}
func (this *Provider) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Provider)
	if !ok {
		that2, ok := that.(Provider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Properties) != len(that1.Properties) {
		return false
	}
	for i := range this.Properties {
		if this.Properties[i] != that1.Properties[i] {
			return false
		}
	}
	return true
}
func (this *CellsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*CellsResponse)
	if !ok {
		that2, ok := that.(CellsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Cells) != len(that1.Cells) {
		return false
	}
	for i := range this.Cells {
		if !this.Cells[i].Equal(that1.Cells[i]) {
			return false
		}
	}
	return true
}
func (this *CellCapacity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&models.CellCapacity{")
	s = append(s, "MemoryMb: "+fmt.Sprintf("%#v", this.MemoryMb)+",\n")
	s = append(s, "DiskMb: "+fmt.Sprintf("%#v", this.DiskMb)+",\n")
	s = append(s, "Containers: "+fmt.Sprintf("%#v", this.Containers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CellPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.CellPresence{")
	s = append(s, "CellId: "+fmt.Sprintf("%#v", this.CellId)+",\n")
	s = append(s, "RepAddress: "+fmt.Sprintf("%#v", this.RepAddress)+",\n")
	s = append(s, "Zone: "+fmt.Sprintf("%#v", this.Zone)+",\n")
	if this.Capacity != nil {
		s = append(s, "Capacity: "+fmt.Sprintf("%#v", this.Capacity)+",\n")
	}
	if this.RootfsProviders != nil {
		s = append(s, "RootfsProviders: "+fmt.Sprintf("%#v", this.RootfsProviders)+",\n")
	}
	if this.PlacementTags != nil {
		s = append(s, "PlacementTags: "+fmt.Sprintf("%#v", this.PlacementTags)+",\n")
	}
	if this.OptionalPlacementTags != nil {
		s = append(s, "OptionalPlacementTags: "+fmt.Sprintf("%#v", this.OptionalPlacementTags)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Provider) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.Provider{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Properties != nil {
		s = append(s, "Properties: "+fmt.Sprintf("%#v", this.Properties)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CellsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&models.CellsResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Cells != nil {
		s = append(s, "Cells: "+fmt.Sprintf("%#v", this.Cells)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCells(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringCells(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *CellCapacity) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CellCapacity) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0x8
	i++
	i = encodeVarintCells(data, i, uint64(m.MemoryMb))
	data[i] = 0x10
	i++
	i = encodeVarintCells(data, i, uint64(m.DiskMb))
	data[i] = 0x18
	i++
	i = encodeVarintCells(data, i, uint64(m.Containers))
	return i, nil
}

func (m *CellPresence) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CellPresence) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintCells(data, i, uint64(len(m.CellId)))
	i += copy(data[i:], m.CellId)
	data[i] = 0x12
	i++
	i = encodeVarintCells(data, i, uint64(len(m.RepAddress)))
	i += copy(data[i:], m.RepAddress)
	data[i] = 0x1a
	i++
	i = encodeVarintCells(data, i, uint64(len(m.Zone)))
	i += copy(data[i:], m.Zone)
	if m.Capacity != nil {
		data[i] = 0x22
		i++
		i = encodeVarintCells(data, i, uint64(m.Capacity.Size()))
		n1, err := m.Capacity.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.RootfsProviders) > 0 {
		for _, msg := range m.RootfsProviders {
			data[i] = 0x2a
			i++
			i = encodeVarintCells(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PlacementTags) > 0 {
		for _, s := range m.PlacementTags {
			data[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.OptionalPlacementTags) > 0 {
		for _, s := range m.OptionalPlacementTags {
			data[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *Provider) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Provider) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintCells(data, i, uint64(len(m.Name)))
	i += copy(data[i:], m.Name)
	if len(m.Properties) > 0 {
		for _, s := range m.Properties {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *CellsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *CellsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		data[i] = 0xa
		i++
		i = encodeVarintCells(data, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Cells) > 0 {
		for _, msg := range m.Cells {
			data[i] = 0x12
			i++
			i = encodeVarintCells(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Cells(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cells(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCells(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *CellCapacity) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCells(uint64(m.MemoryMb))
	n += 1 + sovCells(uint64(m.DiskMb))
	n += 1 + sovCells(uint64(m.Containers))
	return n
}

func (m *CellPresence) Size() (n int) {
	var l int
	_ = l
	l = len(m.CellId)
	n += 1 + l + sovCells(uint64(l))
	l = len(m.RepAddress)
	n += 1 + l + sovCells(uint64(l))
	l = len(m.Zone)
	n += 1 + l + sovCells(uint64(l))
	if m.Capacity != nil {
		l = m.Capacity.Size()
		n += 1 + l + sovCells(uint64(l))
	}
	if len(m.RootfsProviders) > 0 {
		for _, e := range m.RootfsProviders {
			l = e.Size()
			n += 1 + l + sovCells(uint64(l))
		}
	}
	if len(m.PlacementTags) > 0 {
		for _, s := range m.PlacementTags {
			l = len(s)
			n += 1 + l + sovCells(uint64(l))
		}
	}
	if len(m.OptionalPlacementTags) > 0 {
		for _, s := range m.OptionalPlacementTags {
			l = len(s)
			n += 1 + l + sovCells(uint64(l))
		}
	}
	return n
}

func (m *Provider) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCells(uint64(l))
	if len(m.Properties) > 0 {
		for _, s := range m.Properties {
			l = len(s)
			n += 1 + l + sovCells(uint64(l))
		}
	}
	return n
}

func (m *CellsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCells(uint64(l))
	}
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovCells(uint64(l))
		}
	}
	return n
}

func sovCells(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCells(x uint64) (n int) {
	return sovCells(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CellCapacity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CellCapacity{`,
		`MemoryMb:` + fmt.Sprintf("%v", this.MemoryMb) + `,`,
		`DiskMb:` + fmt.Sprintf("%v", this.DiskMb) + `,`,
		`Containers:` + fmt.Sprintf("%v", this.Containers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CellPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CellPresence{`,
		`CellId:` + fmt.Sprintf("%v", this.CellId) + `,`,
		`RepAddress:` + fmt.Sprintf("%v", this.RepAddress) + `,`,
		`Zone:` + fmt.Sprintf("%v", this.Zone) + `,`,
		`Capacity:` + strings.Replace(fmt.Sprintf("%v", this.Capacity), "CellCapacity", "CellCapacity", 1) + `,`,
		`RootfsProviders:` + strings.Replace(fmt.Sprintf("%v", this.RootfsProviders), "Provider", "Provider", 1) + `,`,
		`PlacementTags:` + fmt.Sprintf("%v", this.PlacementTags) + `,`,
		`OptionalPlacementTags:` + fmt.Sprintf("%v", this.OptionalPlacementTags) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Provider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Provider{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Properties:` + fmt.Sprintf("%v", this.Properties) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CellsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CellsResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Cells:` + strings.Replace(fmt.Sprintf("%v", this.Cells), "CellPresence", "CellPresence", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCells(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CellCapacity) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCells
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellCapacity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellCapacity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryMb", wireType)
			}
			m.MemoryMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MemoryMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskMb", wireType)
			}
			m.DiskMb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DiskMb |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			m.Containers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Containers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCells(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCells
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellPresence) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCells
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellPresence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellPresence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CellId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capacity == nil {
				m.Capacity = &CellCapacity{}
			}
			if err := m.Capacity.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootfsProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootfsProviders = append(m.RootfsProviders, &Provider{})
			if err := m.RootfsProviders[len(m.RootfsProviders)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlacementTags = append(m.PlacementTags, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalPlacementTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalPlacementTags = append(m.OptionalPlacementTags, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCells(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCells
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Provider) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCells
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Provider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Provider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCells(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCells
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCells
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCells
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCells
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &CellPresence{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCells(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCells
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCells(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCells
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCells
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCells
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCells
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCells
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCells(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCells = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCells   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cells.proto", fileDescriptorCells) }

var fileDescriptorCells = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x92, 0x8f, 0x26, 0x6b, 0x02, 0xd5, 0xaa, 0x08, 0xab, 0x82, 0x4d, 0x1a, 0xa8, 0x14,
	0xa1, 0x92, 0xa2, 0x9c, 0xb8, 0x92, 0x88, 0x03, 0x87, 0x4a, 0x91, 0xc5, 0x15, 0x8c, 0x63, 0x4f,
	0xcd, 0x0a, 0xdb, 0xbb, 0xda, 0xdd, 0x56, 0x0a, 0x27, 0x7e, 0x02, 0x7f, 0x02, 0x89, 0x9f, 0xd2,
	0x63, 0x8f, 0x9c, 0x2c, 0x62, 0x2e, 0x28, 0xa7, 0xfe, 0x04, 0xb4, 0xeb, 0xba, 0xb8, 0x91, 0x7a,
	0xcb, 0xbc, 0xf7, 0xe6, 0xbd, 0xcc, 0xcc, 0x1a, 0x3b, 0x21, 0x24, 0x89, 0x9a, 0x08, 0xc9, 0x35,
	0x27, 0x9d, 0x94, 0x47, 0x90, 0xa8, 0xfd, 0x97, 0x31, 0xd3, 0x9f, 0xcf, 0x96, 0x93, 0x90, 0xa7,
	0xc7, 0x31, 0x8f, 0xf9, 0xb1, 0xa5, 0x97, 0x67, 0xa7, 0xb6, 0xb2, 0x85, 0xfd, 0x55, 0xb6, 0xed,
	0x3b, 0x20, 0x25, 0x97, 0x65, 0x31, 0x3a, 0xc7, 0xf7, 0xe7, 0x90, 0x24, 0xf3, 0x40, 0x04, 0x21,
	0xd3, 0x2b, 0x72, 0x80, 0x7b, 0x29, 0xa4, 0x5c, 0xae, 0xfc, 0x74, 0xe9, 0xa2, 0x21, 0x1a, 0xb7,
	0x67, 0xad, 0x8b, 0x7c, 0xd0, 0xf0, 0xba, 0x25, 0x7c, 0xb2, 0x24, 0x4f, 0xf1, 0x4e, 0xc4, 0xd4,
	0x17, 0x23, 0xb8, 0x57, 0x13, 0x74, 0x0c, 0x78, 0xb2, 0x24, 0xcf, 0x31, 0x0e, 0x79, 0xa6, 0x03,
	0x96, 0x81, 0x54, 0x6e, 0xb3, 0xa6, 0xa8, 0xe1, 0xa3, 0x1f, 0xcd, 0x32, 0x78, 0x21, 0x41, 0x41,
	0x16, 0x82, 0x71, 0x35, 0xb3, 0xf9, 0x2c, 0xb2, 0xb1, 0xbd, 0xca, 0xd5, 0x80, 0xef, 0x22, 0x72,
	0x88, 0x1d, 0x09, 0xc2, 0x0f, 0xa2, 0x48, 0x82, 0x52, 0x36, 0xb8, 0x92, 0x60, 0x09, 0xe2, 0x4d,
	0x89, 0x13, 0x17, 0xb7, 0xbe, 0xf2, 0x0c, 0x6c, 0x6c, 0xc5, 0x5b, 0x84, 0xbc, 0xc2, 0xdd, 0xf0,
	0x7a, 0x48, 0xb7, 0x35, 0x44, 0x63, 0x67, 0xba, 0x37, 0x29, 0xf7, 0x37, 0xa9, 0x2f, 0xc0, 0xbb,
	0x51, 0x11, 0x1f, 0xef, 0x4a, 0xce, 0xf5, 0xa9, 0xf2, 0x85, 0xe4, 0xe7, 0x2c, 0x32, 0xe3, 0xb4,
	0x87, 0xcd, 0xb1, 0x33, 0xdd, 0xad, 0x3a, 0x17, 0xd7, 0xc4, 0x6c, 0xb4, 0xc9, 0x07, 0x74, 0x4b,
	0xed, 0x27, 0x4c, 0xe9, 0x23, 0x9e, 0x32, 0x0d, 0xa9, 0xd0, 0x2b, 0xef, 0x61, 0xc9, 0x57, 0x3d,
	0x8a, 0xcc, 0xf1, 0x03, 0x91, 0x04, 0x21, 0xa4, 0x90, 0x69, 0x5f, 0x07, 0xb1, 0x72, 0x3b, 0xc3,
	0xe6, 0xb8, 0x37, 0x7b, 0xb2, 0xc9, 0x07, 0xee, 0x6d, 0xa6, 0x66, 0xd3, 0xbf, 0x61, 0xde, 0x07,
	0xb1, 0x22, 0x1f, 0xf0, 0x63, 0x2e, 0x34, 0xe3, 0x59, 0x90, 0xf8, 0x5b, 0x6e, 0x3b, 0xd6, 0xed,
	0x70, 0x93, 0x0f, 0x0e, 0xee, 0x90, 0xd4, 0x6c, 0x1f, 0x55, 0x92, 0x45, 0xdd, 0x7e, 0xf4, 0x11,
	0x77, 0xab, 0x3f, 0x6c, 0x96, 0x9b, 0x05, 0x29, 0xdc, 0xba, 0x8f, 0x45, 0xc8, 0x6b, 0x8c, 0x85,
	0xe4, 0x02, 0xa4, 0x66, 0x60, 0x8e, 0x63, 0x72, 0xdd, 0x4d, 0x3e, 0xd8, 0xfb, 0x8f, 0xd6, 0xa2,
	0x6a, 0xda, 0xd1, 0x27, 0xdc, 0x37, 0xeb, 0x57, 0x1e, 0x28, 0xc1, 0x33, 0x05, 0xe4, 0x19, 0x6e,
	0xdb, 0xf7, 0x69, 0x53, 0x9c, 0x69, 0xbf, 0x5a, 0xf5, 0x5b, 0x03, 0x7a, 0x25, 0x47, 0x5e, 0xe0,
	0xb6, 0xfd, 0x10, 0x6c, 0xd4, 0xd6, 0x25, 0xab, 0x17, 0xe5, 0x95, 0x92, 0xd9, 0xd1, 0xe5, 0x9a,
	0x36, 0x7e, 0xad, 0x69, 0xe3, 0x6a, 0x4d, 0xd1, 0xb7, 0x82, 0xa2, 0x9f, 0x05, 0x45, 0x17, 0x05,
	0x45, 0x97, 0x05, 0x45, 0xbf, 0x0b, 0x8a, 0xfe, 0x16, 0xb4, 0x71, 0x55, 0x50, 0xf4, 0xfd, 0x0f,
	0x6d, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xcd, 0x44, 0xeb, 0x61, 0x03, 0x00, 0x00,
}
